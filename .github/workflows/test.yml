
name: "Test"
on:
  # This will trigger deployment to `development` on each push to main
  # `development` is set as a default environment below
  push:
    branches:
      - main
  # However, deployemnt to other environments (or re-running job for `development`) should be done manually
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true

# env:
#   # If the environment input was not provided (i.e if the commit was pushed to main),
#   # default to `development`. Effectively, the job below will run deploy for `development` on each push to main,
#   # and use an input environment for manually triggered jobs
#   CURRENT_ENVIRONMENT: ${{ github.event_name == 'push' && 'development' || inputs.environment }}

jobs:
  deploy:
    # github currently does not support usage of env variables on a job level definitions
    name: Test ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    # TODO: Currently we do not have a dev environment, so we cannot actually deploy.
    # Once dev is live -- remove the `if` condition below.
    # if: ${{ github.event_name != 'push' && inputs.environment != 'development' }}
    steps:
      - name: Test variables
        id: test
        run: echo "VARIABLE IS ${{vars.VARIABLE}}"
        continue-on-error: false

  tag-commit:
    permissions:
      contents: write
    name: Tag Commit
    runs-on: ubuntu-latest
    # Only run this step if the deployment succeeded.
    needs:
      - deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Tag Deployment
        shell: bash
        run: |
          set -x
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          CURRENT_COMMIT=$(git rev-parse HEAD)
          CURRENT_ENVIRONMENT="${{ github.event_name == 'push' && 'development' || inputs.environment }}"

          get_latest_tagged_commit() {
            local pattern=$1

            git for-each-ref --sort=-creatordate --format '(%objectname)' "refs/tags/$pattern" | head -n 1
          }

          get_commit_tags() {
            local commit=$1

            git tag -l --points-at $commit
          }

          has_environment() {
            local tag=$1
            local env=$2

            echo "$tag" | grep -q "^$env\$\|^$env-\|-$env\$\|-$env-"
          }

          remove_environment() {
            local tag=$1
            local env=$2

            echo "$tag" | sed "s/^$env-//;s/-$env-/-/g;s/-$env\$//;s/^$env\$//"
          }

          git tag -l

          for TAG in $(git tag); do
            if [[ "$TAG" == *"-"* ]]; then
              TAGGED_COMMIT=$(git rev-parse $TAG^{commit} 2>dev/null || echo "")
              if [ ! -z "$TAGGED_COMMIT" ] && has_environment "$TAG" "$CURRENT_ENVIRONMENT"; then

                NEW_ENV_TAG=$(remove_environment "$TAG" "$CURRENT_ENVIRONMENT")
                if [ ! -z "$NEW_ENV_TAG" ]; then
                  git tag -d "$TAG"
                  git push --delete origin "$TAG" || true

                  git tag "$NEW_ENV_TAG" $TAGGED_COMMIT
                  git push origin "$NEW_ENV_TAG"
                fi
              fi
            fi
          done

          CURRENT_TAGS=$(get_commit_tags $CURRENT_COMMIT)

          if [ ! -z "$CURRENT_TAGS" ]; then
            # TODO
            EXISTING_TAG=$(echo "$CURRENT_TAGS" | head -n 1)
            if [ "$EXISTING_TAG" != "$CURRENT_ENVIRONMENT" ]; then
              NEW_TAG="${EXISTING_TAG}-${CURRENT_ENVIRONMENT}"
            else
              exit 0
            fi
          else
            NEW_TAG="${CURRENT_ENVIRONMENT}"
          fi

          echo "NEW TAG: $NEW_TAG"
          git tag "$NEW_TAG" $CURRENT_COMMIT
          git push origin "$NEW_TAG"