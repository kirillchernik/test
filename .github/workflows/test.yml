
name: "Test"
on:
  # This will trigger deployment to `development` on each push to main
  # `development` is set as a default environment below
  push:
    branches:
      - main
  # However, deployemnt to other environments (or re-running job for `development`) should be done manually
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true

# env:
#   # If the environment input was not provided (i.e if the commit was pushed to main),
#   # default to `development`. Effectively, the job below will run deploy for `development` on each push to main,
#   # and use an input environment for manually triggered jobs
#   CURRENT_ENVIRONMENT: ${{ github.event_name == 'push' && 'development' || inputs.environment }}

jobs:
  deploy:
    # github currently does not support usage of env variables on a job level definitions
    name: Test ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    # TODO: Currently we do not have a dev environment, so we cannot actually deploy.
    # Once dev is live -- remove the `if` condition below.
    # if: ${{ github.event_name != 'push' && inputs.environment != 'development' }}
    steps:
      - name: Test variables
        id: test
        run: echo "VARIABLE IS ${{vars.VARIABLE}}"
        continue-on-error: false

  tag-commit:
    permissions:
      contents: write
      actions: write
    name: Tag Commit
    runs-on: ubuntu-latest
    # Only run this step if the deployment succeeded.
    needs:
      - deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      - name: Tag Deployment
        shell: bash
        run: |
          set -x
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          CURRENT_COMMIT=$(git rev-parse HEAD)
          CURRENT_ENVIRONMENT="${{ github.event_name == 'push' && 'development' || inputs.environment }}"

          get_latest_tagged_commit() {
            local pattern=$1

            git for-each-ref --sort=-creatordate --format '(%objectname)' "refs/tags/$pattern" | head -n 1
          }

          get_commit_tags() {
            local commit=$1

            git tag -l --points-at $commit
          }

          retry_git_operation() {
            local max_attempts=3
            local attempt=1
            local command=$@

            while [ $attempt -le $max_attempts ]; do
              if eval "$command"; then
                return 0
              fi
              echo 'Attempt $attempt failed, waiting...'
              sleep $((attempt * 2))
              attempt=$((attempt + 1))
            done
            return 1
          }

          safe_tag_delete() {
            local tag=$1

            retry_git_operation "git tag -d $tag"
            retry_git_operation "git push --delete origin $tag || true"
            sleep 1
          }


          safe_tag_push() {
            local tag=$1
            local commit=$2

            retry_git_operation "git tag $tag $commit"
            retry_git_operation "git push origin $tag"
            sleep 1
          }

          cleanup_old_env_tags() {
            local env=$1

            for TAG in $(git tag -l "*${env}*" | grep -v "^$CURRENT_COMMIT"); do
              TAGGED_COMMIT=$(git rev-parse $TAG^{commit} 2>/dev/null || echo "")

              if [ ! -z "$TAGGED_COMMIT" ] && [ "$TAGGED_COMMIT" != "$CURRENT_COMMIT" ]; then
                if [[ "$TAG" == *"-$env" ]]; then
                  REMAINING_ENV=${TAG%-$env}
                  if [ ! -z "$REMAINING_ENV" ]; then
                    safe_tag_delete "$TAG"
                    safe_tag_push "$REMAINING_ENV" $TAGGED_COMMIT
                  fi
                elif [[ "$TAG" == "$env-"* ]]; then
                  REMAINING_ENV=${TAG#$env-}
                  if [ ! -z "$REMAINING_ENV" ]; then
                    safe_tag_delete "$TAG"
                    safe_tag_push "$REMAINING_ENV" $TAGGED_COMMIT
                  fi
                elif [[ "$TAG" == "$env" ]]; then
                  safe_tag_delete "$TAG"
                fi
              fi
            done
          }

          CURRENT_TAGS=$(get_commit_tags $CURRENT_COMMIT)
          if [ ! -z "$CURRENT_TAGS" ]; then
            BASE_TAG=$(echo "$CURRENT_TAGS" | grep -v "$CURRENT_ENVIRONMENT" | head -n 1)
            if [ ! -z "$BASE_TAG" ]; then
              NEW_TAG="${BASE_TAG}-${CURRENT_ENVIRONMENT}"
              safe_tag_delete "$BASE_TAG"
            else
              NEW_TAG="$CURRENT_ENVIRONMENT"
            fi
          else
            NEW_TAG="$CURRENT_ENVIRONMENT"
          fi

          cleanup_old_env_tags "$CURRENT_ENVIRONMENT"

          safe_tag_push "$NEW_TAG" "$CURRENT_COMMIT"


