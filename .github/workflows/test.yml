
name: "Test"
on:
  # This will trigger deployment to `development` on each push to main
  # `development` is set as a default environment below
  push:
    branches:
      - main
  # However, deployemnt to other environments (or re-running job for `development`) should be done manually
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true

# env:
#   # If the environment input was not provided (i.e if the commit was pushed to main),
#   # default to `development`. Effectively, the job below will run deploy for `development` on each push to main,
#   # and use an input environment for manually triggered jobs
#   CURRENT_ENVIRONMENT: ${{ github.event_name == 'push' && 'development' || inputs.environment }}

jobs:
  deploy:
    # github currently does not support usage of env variables on a job level definitions
    name: Test ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    # TODO: Currently we do not have a dev environment, so we cannot actually deploy.
    # Once dev is live -- remove the `if` condition below.
    # if: ${{ github.event_name != 'push' && inputs.environment != 'development' }}
    steps:
      - name: Test variables
        id: test
        run: echo "VARIABLE IS ${{vars.VARIABLE}}"
        continue-on-error: false

  tag-commit:
    permissions:
      contents: write
    name: Tag Commit
    runs-on: ubuntu-latest
    # Only run this step if the deployment succeeded.
    needs:
      - deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Tag Deployment
        shell: bash
        run: |
          set -x
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          CURRENT_COMMIT=$(git rev-parse HEAD)
          CURRENT_ENVIRONMENT="${{ github.event_name == 'push' && 'development' || inputs.environment }}"

          get_tagged_commit() {
            local tag=$1
            git rev-parse $tag^{commit} 2>/dev/null || echo ""
          }

          EXISTING_TAGS=$(git tag -l | grep -E "^(development|staging|qa|production)(-.*)?$" || true)

          for TAG in $EXISTING_TAGS; do
            TAGGED_COMMIT=$(get_tagged_commit $TAG)
            if [ ! -z "$TAGGED_COMMIT" ]; then
              IFS='-' read -ra ENVS <<< "$TAG"

              if [[ "$TAG" =~ $CURRENT_ENV ]]; then
                NEW_ENVS=()
                for E in "${ENVS[@]}"; do
                  if [ "$E" != "$CURRENT_ENV" ]; then
                    NEW_ENVS+=("$E")
                  fi
                done

                git tag -d "$TAG"
                git push --delete origin "$TAG" || true

                if [ ${#NEW_ENVS[@]} -gt 0 ]; then
                  NEW_TAG=$(IFS='-'; echo "${NEW_ENVS[*]}")
                  git tag "$NEW_TAG" $TAGGED_COMMIT
                  git push origin "$NEW_TAG"
                fi
              fi
            fi
          done

          CURRENT_TAG=$(git tag -l --points-at $CURRENT_COMMIT | grep -E "^(development|staging|qa|production)(-.*)?$" || echo "")

          if [ -z "$CURRENT_TAG" ]; then
            NEW_TAG="$CURRENT_ENVIRONMENT"
          else
            if [[ ! "$CURRENT_TAG" =~ $CURRENT_ENVIRONMENT ]]; then
              git tag -d "$CURRENT_TAG"
              git push --delete origin "$CURRENT_TAG" || true
              NEW_TAG="${CURRENT_TAG}-${CURRENT_ENVIRONMENT}"
            else
              exit 0
            fi
          fi

          echo "NEW TAG: $NEW_TAG"
          git tag "$NEW_TAG" $CURRENT_COMMIT
          git push origin "$NEW_TAG"