name: Docker Build

on: push
    # paths:
    # identify paths
    # TODO: use output from glob?
    # - /outbound/integration-handlers/<partner>/<integration handler name>
jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Glob match
        uses: tj-actions/glob@v22
        id: glob
        with:
          files: /outbound/integration-handlers/**/Dockerfile

      - name: generate-matrix
        id: generate-matrix
        run: |
          PATHS_JSON=$(echo "${{ steps.glob.outputs.paths }}" | \
            jq -R 'split(" ")' | \
            jq '[
              .[] | {
                dockerfile: .,
                context: (split("/")[0:-1] | join("/")),
                name: (split("/")[2:-1] | join("-")),
                module: ((split("/")[2:-1] | join("_")) | sed -r 's/[/-]+/_/g')
              }
            ]' | \
            jq -c .)
          echo "matrix=${PATHS_JSON}" >> $GITHUB_OUTPUT

  configure:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Skip
        run: |
          echo "Hello"

  build:
    runs-on: ubuntu-latest
    needs: [ init, configure ]
    strategy:
      matrix:
        config: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: test
        run: |
          echo "dockerfile ${{ matrix.config.dockerfile }}"
          echo "context ${{ matrix.config.context }}"
          echo "name ${{ matrix.config.name }}"
          echo "module ${{ matrix.config.module }}"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        env:
          ECR_REGISTRY: abc # TODO
          ECR_REPOSITORY: cde # TODO
        run: |
          IMAGE_TAG="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ matrix.config.name }}-${{ github.sha }}"

          echo "Building docker image for lambda ${IMAGE_TAG}"
          docker build \
          --tag "${IMAGE_TAG}" \
          --file "${{ matrix.config.dockerfile }}" \
          --build-context workspace=. \
          --build-context project="${{ matrix.config.context }}" \
          --platform linux/amd64 \
          ${{ matrix.config.context }}
